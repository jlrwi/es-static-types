/*jslint
    fudge
*/

import {
    constant,
    apply,
    identity
} from "@jlrwi/combinators";

import {
    string_concat,
    equals,
    lte,
    type_check
} from "@jlrwi/esfunctions";

const type_name = "esString";

// Semigroup :: a -> a -> a
const concat = string_concat;

const append = concat;

// Monoid :: () -> a
const empty = constant ("");

// Setoid :: a -> a -> Boolean
// uses imported equals

// Ord :: a -> a -> Boolean
// Argument format: lte (x) (y) -> lte x is y
// uses imported lte

// Functor :: (a -> b) -> a -> b
const map = apply;

const validate = type_check ("string");

const create = identity;

const type_factory = function (ignore) {
    return Object.freeze({
        spec: "StaticLand",
        version: 1,
        type_name,
        concat,
        append,
        empty,
        equals,
        lte,
        map,
        create,
        validate
    });
};



export default Object.freeze(type_factory);

