/*jslint
    fudge
*/

import {
    identity
} from "@jlrwi/combinators";
import {
    equals,
    lte,
    type_check
} from "@jlrwi/esfunctions";

// Static Land implementation of Number
const type_name = "esNumber";

// Setoid :: a -> a -> Boolean
const num_equals = function (x) {
    return function (y) {
        return (
            Number.isNaN(x)
            ? Number.isNaN(y)
            : equals (x) (y)
        );
    };
};

// Ord :: a -> a -> Boolean
// Order reads "lte y is x"
const num_lte = function (y) {
    return function (x) {
        return Number.isNaN(x) || lte (x) (y);
    };
};

// Functor :: (a -> b) -> a -> b
const map = identity;

const validate = type_check ("number");

const create = identity;

const type_factory = function (ignore) {
    return Object.freeze({
        spec: "StaticLand",
        version: 1,
        type_name,
        equals: num_equals,
        lte: num_lte,
        map,
        create,
        validate
    });
};



export default Object.freeze(type_factory);
