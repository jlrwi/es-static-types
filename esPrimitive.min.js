/*jslint
    unordered
*/

// Generic type for primitive values:
// number, string, boolean, undefined, null, NaN

import {
    identity,
    apply,
    pipe
} from "@jlrwi/combinators";
import {
    type_check,
    not,
    or
} from "@jlrwi/esfunctions";

// Static Land implementation of Number
const type_name = "esPrimitive";

// Setoid :: a -> a -> boolean
const equals = function (a) {
    return function (b) {
        if (a === undefined) {
            return (b === undefined);
        }

        if (a === null) {
            return (b === null);
        }

        if (Number.isNaN(a)) {
            return Number.isNaN(b);
        }

        return (a === b);
    };
};

// Functor :: (a -> b) -> a -> b
const map = apply;

// Apply :: (a -> b) -> a -> b
const ap = apply;

// Applicative :: x -> x
const of = identity;

const validate = pipe(
    or(type_check("object"))(type_check("function"))
)(
    not
);

const create = identity;

const type_factory = function () {
    return Object.freeze({
        spec: "curried-static-land",
        version: 1,
        type_name,
        equals,
        map,
        ap,
        of,
        create,
        validate
    });
};

export default Object.freeze(type_factory);
