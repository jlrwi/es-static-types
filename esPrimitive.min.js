/*jslint
    fudge
*/

// Not passing tests yet - still needs work

import {
    identity,
    apply,
    apply_with,
    second,
    compose
} from "@jlrwi/combinators";
import {
    type_check,
    not,
    or
} from "@jlrwi/esfunctions";

// Static Land implementation of Number
const type_name = "esPrimitive";

// Functor :: (a -> b) -> a -> b
const map = apply;

// Functor :: (a -> b) -> a -> b
const ap = apply;

// Applicative :: x -> x
const of = identity;

const validate = compose (not) (
    or (type_check ("object")) (type_check ("function"))
);

const create = identity;

const type_factory = function (ignore) {
    return Object.freeze({
        spec: "StaticLand",
        version: 1,
        type_name,
        map,
        ap,
        of,
        create,
        validate
    });
};

// NEEDS A COMPARE_WITH f

export default Object.freeze(type_factory);
