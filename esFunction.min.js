/*jslint
    fudge
*/

import {
    apply,
    ap,
    identity,
    compose,
    constant,
    pipe,
    pipeN
} from "@jlrwi/combinators";
import {
    type_check
} from "@jlrwi/esfunctions";

// Static Land implementation of Function

const type_name = "esFunction";

// Semigroupoid :: f -> g -> a -> g a -> f g a
// Uses compose combinator

// Apply :: (a -> b -> c) -> (a -> b) -> (a -> c)
// Synonymous with ap combinator

// Setoid :: a -> a -> Boolean
// Sanctuary uses referential equality, but that is only a subset of equality
//   and thus not helpful

// Category id :: a -> a
const id = identity;

// Functor :: (b -> c) -> (a -> b) -> (a -> c)
const map = compose;

// Chain :: (b -> a -> c) -> (a -> b) -> (a -> c)
// Synonymous with Warbler (Once Removed)? abc.abcc
const chain = function (fbac) {
    return function (fab) {
        return function (a) {
            return fbac(fab(a))(a);
        };
    };
};

// Extend :: ((a -> b) -> c) -> (a -> b) -> (a -> c)
// fabc should take a->b and turn it into a c somehow
// inside fabc is a b->c
// Sanctuary uses concat on the input to the first fx
const extend = apply;

// Comonad :: () -> a
const extract = identity;

// Profunctor :: (a -> b) -> (c -> d) -> (b -> c) -> (a -> d)
// Synonymous with Robin combinator? abc.bca
const promap = function (f) {
    return function (g) {
        return function (promap) {
            return pipeN(f, promap, g);
        };
    };
};

// Applicative :: b -> (a -> b)
const of = constant;

// Contravariant :: (b -> a) -> (a -> c) -> (b  -> c)
const contramap = pipe;

// Sanctuary has chainRec, equals

const validate = type_check("function");

const create = of;

// (a->b) -> a -> b
//const run = apply;

const type_factory = function (ignore) {
    return Object.freeze({
        spec: "curried-static-land",
        version: 1,
        type_name,
        ap,
        chain,
        compose,
//        composeN,
        id,
        map,
        extend,
        extract,
        promap,
        of,
        contramap,
        create,
        validate
//        run
    });
};

export default Object.freeze(type_factory);
